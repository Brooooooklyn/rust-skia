stages:

- stage: 'Build'
  jobs:
  - template: 'azure-pipelines-template.yml'
    parameters:
      platform: 'Linux'
      image: 'ubuntu-16.04'

#  - template: 'azure-pipelines-template.yml'
#    parameters:
#      platform: 'macOS'
#      image: 'macOS-10.14'

#  - template: 'azure-pipelines-template.yml'
#    parameters:
#      platform: 'Windows'
#      image: 'vs2017-win2016'

- stage: 'Package'
  condition: and(succeeded(), eq(variables['build.SourceBranchName'], 'package'))
  jobs:
  - job:
    pool:
      vmImage: ubuntu-16.04
    variables:
      rust_backtrace: 1

    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '2.x'
        addToPath: true
        architecture: 'x64'

    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain stable
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: 'Install Rust'

    - script: |
        rustc -Vv
        cargo -V
      displayName: 'Print versions'

    - bash: |
        set -e
        cd skia-bindings && cargo package -vv --no-verify --target-dir "$(Build.ArtifactStagingDirectory)"
      displayName: 'Package skia-bindings'

    # TODO: find a better way to extract the skia-safe version
    - bash: |
        set -e
        cd skia-safe && cargo package -vv --target-dir "$(Build.ArtifactStagingDirectory)"
        export SKIA_SAFE_VERSION=$(cd "$(Build.ArtifactStagingDirectory)/package" && find skia-safe-*.crate | cut -d'-' -f3 | cut -d'.' -f1-3)
      displayName: 'Package and Verify skia-safe'

    - task: GithubRelease@0
      displayName: 'Release to GitHub rust-skia/rust-skia'
      inputs:
        action: 'edit'
        gitHubConnection: 'rust-skia-github-connection'
        repositoryName: 'rust-skia/rust-skia'
        tagSource: 'manual'
        target: 'master'
        tag: '$(SKIA_SAFE_VERSION)'
        assets: '$(Build.ArtifactStagingDirectory)/package/*.crate'
        assetUploadMode: 'replace'
        isPreRelease: true
        addChangeLog: false

parameters:
  # defaults:
  androidNDK: ''

jobs:
- job: "${{ parameters.platform }}"

  strategy:
    matrix:
      stable:
        toolchain: stable
        features: ''
        exampleArgs: '--driver cpu --driver pdf'
      beta:
        toolchain: beta
        features: ''
        exampleArgs: ''
      stable-vulkan:
        toolchain: stable
        features: 'vulkan'
        exampleArgs: ''
      stable-svg:
        toolchain: stable
        features: 'svg'
        exampleArgs: '--driver svg'
      stable-shaper:
        toolchain: stable
        features: 'shaper'
        exampleArgs: ''

  variables:
    platform: ${{ parameters.platform }}
    platformTarget: ${{ parameters.platformTarget }}
    image: ${{ parameters.image }}
    androidNDK: ${{ parameters.androidNDK }}
    rust_backtrace: 1
    release_branch: 'release'

  pool:
    vmImage: $(image)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.x'
      addToPath: true
      architecture: 'x64'

  - ${{ if eq(parameters.platform, 'macOS') }}:
    # macOS
    - script: |
        sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
      displayName: Install SDK Headers

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN
        $HOME/.cargo/bin/rustup component add rustfmt --toolchain $TOOLCHAIN
        $HOME/.cargo/bin/rustup component add clippy --toolchain $TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install Rust, Rustfmt, and Clippy

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        choco install llvm --version 8.0.0
      displayName: Install Rust and LLVM on Windows

  # All platforms.
  - script: |
        rustc -Vv
        cargo -V
    displayName: Rust & Cargo Versions

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        clang --version
      displayName: LLVM/Clang Version

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        "C:/Program Files/LLVM/bin/clang.exe" --version
      displayName: LLVM/Clang Version

  - ${{ if ne(parameters.androidNDK, '') }}:
    # Android NDK
    - bash: |
        set -e
        (cd /tmp && curl -sSf -o android-ndk.zip https://dl.google.com/android/repository/android-ndk-$(androidNDK).zip)
        (cd /tmp && unzip android-ndk.zip)
        (cd /tmp/android-ndk-r18b && build/tools/make_standalone_toolchain.py --arch arm64 --install-dir /tmp/ndk-arm64)
        (cd /tmp/android-ndk-r18b && build/tools/make_standalone_toolchain.py --arch x86_64 --install-dir /tmp/ndk-x86_64)
        echo "##vso[task.setvariable variable=PATH;]${PATH}:/tmp/ndk-arm64/bin:/tmp/ndk-x86_64/bin"
        echo "##vso[task.setvariable variable=ANDROID_NDK;]/tmp/android-ndk-r18b"
      displayName: 'Install Android NDK'

  # Note: support to ignore specific rust files and directories is unstable yet: https://github.com/rust-lang/rustfmt/pull/2522
  - bash: |
      set -e
      echo "// WAITING FOR RUSTFMT.TOML TO SUPPORT IGNORING FILES" >skia-bindings/src/bindings.rs
      cargo fmt -- --check
      rm skia-bindings/src/bindings.rs
    displayName: Check Rust formatting

  - template: 'azure-pipelines-build-target.yml'
    parameters:
      target: '$(platformTarget)'
      exampleArgs: '$(exampleArgs)'
      ${{ if ne(parameters.platform, 'Windows') }}:
        runClippy: true
      runBinaries: true
      releaseBinaries: true

  - ${{ if eq(parameters.platform, 'macOS') }}:
    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-linux-android'

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-apple-ios'
        releaseBinaries: true

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-apple-ios'
        releaseBinaries: true

  - ${{ if eq(parameters.platform, 'Linux') }}:
    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'aarch64-linux-android'

    - template: 'azure-pipelines-build-target.yml'
      parameters:
        target: 'x86_64-linux-android'

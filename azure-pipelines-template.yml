jobs:
- job: ${{ parameters.platform }}
  strategy:
    matrix:
      stable:
        toolchain: stable
        features: ''
        exampleArgs: '--driver cpu --driver pdf'
      beta:
        toolchain: beta
        features: ''
      stable-vulkan:
        toolchain: stable
        features: 'vulkan'
      stable-svg:
        toolchain: stable
        features: 'svg'
        exampleArgs: '--driver svg'
  variables:
    platform: ${{ parameters.platform }}
    image: ${{ parameters.image }}
  pool:
    vmImage: $(image)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '2.x'
      addToPath: true
      architecture: 'x64'

  - ${{ if eq(parameters.platform, 'macOS') }}:
    # macOS
    - script: |
        sudo installer -pkg /Library/Developer/CommandLineTools/Packages/macOS_SDK_headers_for_macOS_10.14.pkg -target /
        brew update && brew install llvm@7
      displayName: Install SDK Headers & LLVM

  - ${{ if ne(parameters.platform, 'Windows') }}:
    # Linux and macOS.
    - script: |
        curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $TOOLCHAIN
        echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
      displayName: Install Rust

  - ${{ if eq(parameters.platform, 'Windows') }}:
    # Windows.
    - script: |
        curl -sSf -o rustup-init.exe https://win.rustup.rs
        rustup-init.exe -y --default-toolchain %TOOLCHAIN%
        set PATH=%PATH%;%USERPROFILE%\.cargo\bin
        echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
        choco install llvm --version 7.0.1
      displayName: Install Rust on Windows

  # All platforms.
  - script: |
        rustc -Vv
        cargo -V
    displayName: Print versions

  # Note: features are ignored when set in the workspace. This is a known bug in cargo (#5015), so cd into skia-safe instead.
  - script: cd skia-safe && cargo build --release --features "$(features)" --all-targets -vv
    displayName: Build all targets in skia-safe

  - script: cd skia-safe && cargo test --release --features "$(features)" -vv
    displayName: Test skia-safe

  - script: cd skia-safe && cargo run --release --features "$(features)" --example skia-org "$(Build.ArtifactStagingDirectory)/skia-org" $(exampleArgs)
    displayName: Generate skia-org Example Images
    condition: and(succeeded(), ne(variables['exampleArgs'], ''))

  - task: PublishBuildArtifacts@1
    inputs:
      pathtoPublish: '$(Build.ArtifactStagingDirectory)/skia-org'
      artifactName: 'skia-org-examples-$(platform)-$(toolchain)'
    condition: and(succeeded(), ne(variables['exampleArgs'], ''))
